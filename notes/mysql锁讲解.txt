innoDb
 S  共享锁
 X  排他锁

意向锁
	意向共享锁:表达一个事务想要获取一张表中某几行的共享锁。
	意向排他锁:表达一个事务想要获取一张表中某几行的排他锁
自增长锁
	在sql执行完就释放锁，并不是事务执行完。
	对于Insert...select大数据量插入会影响插入性能，因为会阻塞另外一个事务执行。
	自增算法可以配置。

记录锁
	如果锁的是非主键索引，会在自己的索引上面加锁之后然后再去主键上面加锁锁住.
	如果没有表上没有索引(包括没有主键)，则会使用隐藏的主键索引进行加锁。
	如果要锁的列没有索引，则会进行全表记录加锁。

间隙锁
	间隙锁顾名思义锁间隙，不锁记录。锁间隙的意思就是锁定某一个范围，间隙锁又叫gap锁，其不会阻塞其他的gap锁，但	是会阻塞插入间隙锁，这也是用来防止幻读的关键。

next-key锁
	这个锁本质是记录锁加上gap锁。在RR隔离级别下(InnoDB默认)，Innodb对于行的扫描锁定都是使用此算法，但是如果查询	扫描中有唯一索引会退化成只使用记录锁。为什么呢? 因为唯一索引能确定行数，而其他索引不能确定行数，有可能在其	他事务中会再次添加这个索引的数据会造成幻读。

插入意向锁
	可以看出插入意向锁是在插入的时候产生的,在多个事务同时写入不同数据至同一索引间隙的时候，并不需要等待其他事务完成，不会发生锁等待。假设有一个记录索引包含键值4和7，不同的事务分别插入5和6，每个事务都会产生一个加在4-7之间的插入意向锁，获取在插入行上的排它锁，但是不会被互相锁住，因为数据行并不冲突。


MVCC 
	MVCC，多版本并发控制技术。在InnoDB中，在每一行记录的后面增加两个隐藏列，记录创建版本号和删除版本号。通过版本号和行锁，从而提高数据库系统并发性能。
	快照读:读取的历史数据，简单的select语句，不加锁，MVCC实现可重复读，使用的是MVCC机制读取undo中的已经提交的数	       据。所以它的读取是非阻塞的。
	当前读:需要加锁的语句,update,insert,delete,select...for update等等都是当前读。